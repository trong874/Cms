tinymce.PluginManager.add("shortcode", function (editor, url) {
  function highlightShortcodes(content) {
    var openingTag = '<span class="shortcode-highlight">';
    var closingTag = "</span>";
    content = removeHighlightShortcodes(content);
    var highlightedContent = content.replace(
      /\[(\/?[^\]]+)\]/g,
      function (match, shortcode) {
        if (shortcode.startsWith("/")) {
          return "[" + shortcode + "]" + closingTag;
        } else if (shortcode.endsWith("/")) {
          return openingTag + "[" + shortcode + "]" + closingTag;
        } else {
          return openingTag + "[" + shortcode + "]";
        }
      }
    );

    return highlightedContent;
  }
  function addEventListener(){
    if (window.onEventListenerFromDom) {
      window.onEventListenerFromDom(
        "click",
        ".shortcode-highlight",
        function (ev) {
          //{ shortcode: shortcodeName, attributes, content: shortcodeContent }
          let shortcodeObj = window.getShortcodeObjectFromText(
            ev.target.innerHTML
          );
          if (shortcodeObj) {
            if (window.openShortcodeSetting) {
              window.openShortcodeSetting(
                shortcodeObj.shortcode,
                shortcodeObj.attributes,
                shortcodeObj.content,
                function ($content) {
                  ev.target.innerHTML = $content;
                  editor.undoManager.dispatchChange();
                }
              );
            }
          }
        },
        editor.dom.doc
      );
    }
  }
  function removeHighlightShortcodes(content) {
    return content.replace(
      /<span class="shortcode-highlight">(.*?)<\/span>/g,
      "$1"
    );
  }
  window.removeHighlightShortcodes = removeHighlightShortcodes;
  // Apply highlighting to the initial content
  editor.on("init", function () {
    editor.dom.addStyle(
      ".shortcode-highlight {  padding: 5px;  background-color: antiquewhite;  border: 1px solid #FF7A59;   border-radius: 2px;}  .shortcode-highlight:hover { background-color: #EAF0F6;  cursor: pointer;}"
    );
    var content = editor.getContent();
    var highlightedContent = highlightShortcodes(content);
    editor.setContent(highlightedContent);
    addEventListener();
  });

  // Exclude highlighting when saving the content
  editor.on("SaveContent", function (e) {
    var content = e.content;

    // Remove the highlighting spans from the content
    var cleanedContent = removeHighlightShortcodes(content);

    // Update the saved content without the highlighting
    e.content = cleanedContent;
  });
  var openDialog = function () {
    if (window.openShortcodeSetting) {
      window.openShortcodeSetting("", [], "", function ($content) {
        editor.insertContent($content);
      });
    }
  };
  /* Add a button that opens a window */
  editor.ui.registry.addButton("shortcode", {
    text: "Shortcode",
    onAction: function () {
      /* Open window */
      openDialog();
    },
  });
  /* Adds a menu item, which can then be included in any menu via the menu/menubar configuration */
  editor.ui.registry.addMenuItem("shortcode", {
    text: "Shortcode",
    onAction: function () {
      /* Open window */
      openDialog();
    },
  });
  /* Return the metadata for the help plugin */
  return {
    getMetadata: function () {
      return {
        name: "Shortcode",
        url: "http://hau.xyz",
      };
    },
  };
});
